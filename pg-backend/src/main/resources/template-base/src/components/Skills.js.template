import React from "react";
import "../styles/Skills.css";
import { motion } from "framer-motion";

// Skills data - template variable from backend
const SkillsData = {{skillsData}};

// Fallback icon resolver
const resolveIcon = (icon) => {
  try {
    return require(`../images/${icon}`);
  } catch (error) {
    // Simple SVG placeholder for missing icons
    return `data:image/svg+xml;base64,${btoa(`
      <svg width="60" height="60" viewBox="0 0 72 72" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="72" height="72" rx="12" fill="#ececec" />
        <text x="36" y="40" text-anchor="middle" fill="#bbb" font-size="24">?</text>
      </svg>
    `)}`;
  }
};

const Skills = () => {
  // Calculate total number of skills
  const totalSkills = SkillsData.reduce((acc, cat) => acc + (cat.skills?.length || 0), 0);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const headingVariants = {
    hidden: { y: -50, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.8, ease: "easeOut" }
    }
  };

  const categoryVariants = {
    hidden: { y: 50, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.6, ease: "easeOut" }
    }
  };

  const skillVariants = {
    hidden: { scale: 0.8, opacity: 0 },
    visible: {
      scale: 1,
      opacity: 1,
      transition: { duration: 0.5, ease: "easeOut" }
    }
  };

  return (
    <section className="skills" id="skills">
      <div className="container">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, amount: 0.3 }}
          className="skills-wrapper"
        >
          {/* Section Header */}
          <motion.div variants={headingVariants} className="heading">
            <span className="heading-sub-text">Skill Set</span>
            <h2 className="heading-text">My Skills & Competencies</h2>
            <div className="heading-divider"></div>
          </motion.div>

          {/* Skills Categories */}
          <div className="skills-categories">
            {SkillsData.map((category, categoryIndex) => (
              <motion.div
                key={categoryIndex}
                variants={categoryVariants}
                className="skill-category-block"
              >
                <h3 className="category-title">{category.category}</h3>
                <div className="skills-grid simple-skill-icons">
                  {category.skills.map((skill, skillIndex) => (
                    <motion.div
                      key={skillIndex}
                      variants={skillVariants}
                      className="simple-skill"
                    >
                      <img
                        src={resolveIcon(skill.icon)}
                        alt={skill.name}
                        className="skill-img"
                      />
                      <div className="skill-name">{skill.name}</div>
                    </motion.div>
                  ))}
                </div>
                {/* Only add divider between categories, not after last */}
                {categoryIndex < SkillsData.length - 1 && (
                  <div className="category-divider"></div>
                )}
              </motion.div>
            ))}
          </div>

          {/* Total Skills Counter */}
          <motion.div variants={categoryVariants} className="skills-summary">
            <div className="skills-total">
              <span>Total Skills: <strong>{totalSkills}</strong></span>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

export default Skills;